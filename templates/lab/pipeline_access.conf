input {
  file {
    path => "/lab/access_log.txt"
    start_position => "beginning"
    ignore_older => 0
  }
}
filter {
  if [path] =~ "(.*)(access)(.*)(txt$)" {
    grok {
      match => {
        "message" => '%{IPORHOST:client_ip} (?:%{DATA:remote_user}|-) (?:%{DATA:user_auth}|-) \[%{HTTPDATE:access_timestamp}\] "(?:%{WORD:http_verb} %{NOTSPACE:request_path}(?: HTTP/%{NUMBER:http_version})?|%{DATA:raw_request})" %{NUMBER:response_code} (?:%{NUMBER:response_bytes}|-) %{QS:http_referrer} %{QS:user_agent} %{IPORHOST:server_ip} %{NUMBER:server_port} %{NUMBER:elapsed_millis} (?:%{DATA:client_session}|-) %{QS:x_forwarded_for} %{QS:login_name}'
      }
      overwrite => ["message"]
      remove_field => ["remote_username","user_authenticated"]
    }
    mutate {
      gsub => [
          "request", "\?.+", "",
          "x_forwarded_for", "(^\"|\"$)", "",
          "login_name", "(^\"|\"$)" , "",
          "http_referrer",  "(^\"|\"$)" , "",
          "user_agent", "(^\"|\"$)" , ""
      ]
    }
    if [x_forwarded_for] != "-" {
      mutate { add_field => { "proxy_server" => "%{client_ip}" } }
      mutate { replace => { "client_ip" => "%{x_forwarded_for}" } }
      mutate { remove_field => ["x_forwarded_for"]}
    }
    if ![response_bytes] {
      mutate { add_field => { "response_bytes" => "0" } }
    }
    mutate {
      convert => {
        "response_bytes" => "integer"
        "elapsed_millis" => "integer"
        "server_port" => "integer"
      }
    }
    date { match => [ "access_timestamp" , "dd/MMM/yyyy:HH:mm:ss Z" ] }
    mutate { remove_field => ["message"]}
  }
}
output {
  stdout {

  }
}
