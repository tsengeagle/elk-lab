input {
	stdin {
		add_field => {
			"fields.env" => "hello"
		}
	}
	beats {
		port => 9603
	}
}

filter {
	if ([message] =~ "(.*)Axis2Message summary trace(.*)") {
		if ("request_id" in [message]) {
			grok {
				match => {
					"message" => "%{TIMESTAMP_ISO8601:log_timestamp} %{LOGLEVEL:log_level} --- \[%{DATA:log_thread}\] %{DATA:logger} \: Axis2Message\ summary\ trace\:\[source\:%{DATA:source},dest\:%{DATA:dest},endpoint\:%{DATA:endpoint},message_sha\:%{DATA:message_sha},repeat_time\:%{NUMBER:repeat},retry_time\:%{NUMBER:retry},total_duration\:%{NUMBER:total_duration},call_duration\:%{NUMBER:call_duration},generate_request_duration\:%{NUMBER:gen_request_duration},calculate_sha_duration\:%{NUMBER:cal_sha_duration},send_request_duration\:%{NUMBER:send_duration},unMarshalling_duration\:%{NUMBER:unmarshall_duration},init_to_call_duration\:%{NUMBER:init_to_call_duration},call_to_gen_req_duration\:%{NUMBER:call_to_gen_req_duration},gen_req_to_sha_duration\:%{NUMBER:gen_req_to_sha_duration},sha_to_send_duration\:%{NUMBER:sha_to_send_duration},send_to_unmarshall_duration\:%{NUMBER:send_to_unmarshall_duration},unmarshall_to_end_duration\:%{NUMBER:unmarshall_to_end_duration},dup_duration\:%{NUMBER:duplicated_wait_duration},requestOME_length\:%{NUMBER:request_length},responseOME_length\:%{NUMBER:response_length},request_id\:%{DATA:request_id}\]%{GREEDYDATA:other_message}"
				}
				add_tag => ["axis2_trace", "trigger_by_ro"]
				add_field => {
					"type" => "trace"
				}
			}
		}
		else {
			grok {
				match => {
					"message" => "%{TIMESTAMP_ISO8601:log_timestamp} %{LOGLEVEL:log_level} --- \[%{DATA:log_thread}\] %{DATA:logger} \: Axis2Message\ summary\ trace\:\[source\:%{DATA:source},dest\:%{DATA:dest},endpoint\:%{DATA:endpoint},message_sha\:%{DATA:message_sha},repeat_time\:%{NUMBER:repeat},retry_time\:%{NUMBER:retry},total_duration\:%{NUMBER:total_duration},call_duration\:%{NUMBER:call_duration},generate_request_duration\:%{NUMBER:gen_request_duration},calculate_sha_duration\:%{NUMBER:cal_sha_duration},send_request_duration\:%{NUMBER:send_duration},unMarshalling_duration\:%{NUMBER:unmarshall_duration},init_to_call_duration\:%{NUMBER:init_to_call_duration},call_to_gen_req_duration\:%{NUMBER:call_to_gen_req_duration},gen_req_to_sha_duration\:%{NUMBER:gen_req_to_sha_duration},sha_to_send_duration\:%{NUMBER:sha_to_send_duration},send_to_unmarshall_duration\:%{NUMBER:send_to_unmarshall_duration},unmarshall_to_end_duration\:%{NUMBER:unmarshall_to_end_duration},dup_duration\:%{NUMBER:duplicated_wait_duration},requestOME_length\:%{NUMBER:request_length},responseOME_length\:%{NUMBER:response_length}%{GREEDYDATA:other_message}"
				}
				add_tag => ["axis2_trace"]
				add_field => {
					"type" => "trace"
				}
			}
		}
	}
	if ([message] =~ "(.*)appstats:soap_collector@@@(.*)") {
		grok {
			match => {
				"message" => "%{TIMESTAMP_ISO8601:log_timestamp} %{LOGLEVEL:log_level} --- \[%{DATA:log_thread}\] %{DATA:logger}  \: appstats\:soap_collector@@@phase\:%{DATA:phase}@@@send_time\:%{TIMESTAMP_ISO8601:send_time}@@@elapsed_time\:%{NUMBER:elapsed_time}@@@from\:%{DATA:source_service}_%{DATA:source_node}@@@endpoint\:%{DATA:dest_service}@@@method\:%{DATA:dest_endpoint}@@@fail_redo\:%{DATA:redo_time:NUMBER}@@@message_repeat\:%{DATA:repeat_time:NUMBER}@@@message_sha\:%{GREEDYDATA:message_sha}"
			}
			add_tag => ["soap_trace"]
			add_field => {
				"type" => "trace"
			}
		}
	}
}

output {
	# stdout {
	# 	codec => rubydebug
	# }
	if [type] == "trace" {
		elasticsearch {
			hosts => ["elasticsearch.mfsd.my:9200"]
			index => "my-index-trace-%{[fields][env]}-%{+YYYY.MM.dd}"
		}
	}
}
