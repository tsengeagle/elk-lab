input {
	stdin {
		add_field => {
			"[fields][log_type]" => "process"
			"[host][name]" => "localhost"
		}
	}
	beats {
		port => 9602
	}
}

filter {
	if ("gc" in [tags]) {
		if ("->" in [message]) {
			grok {
				match => {
					"message" => "%{TIMESTAMP_ISO8601:timestamp}: %{NUMBER:jvm_startup}: \[%{DATA:gc_type} %{DATA:gc_cause} %{NUMBER:gc_before}%{DATA:gc_before_unit}->%{NUMBER:gc_after}%{DATA:gc_after_unit}\(%{NUMBER:gc_total}%{DATA:gc_total_unit}\), %{NUMBER:gc_duration} %{DATA:duration_unit}\]"
				}
				add_field => ["received_at", "%{@timestamp}"]
			}
		}
		if ("pause" in [message]) {
			grok {
				match => {
					"message" => "%{TIMESTAMP_ISO8601:gc_timestamp}: %{NUMBER:jvm_startup}: \[%{DATA:gc_type}, %{NUMBER:gc_duration} %{DATA:duration_unit}\]%{GREEDYDATA:other_message}"
				}
				add_field => ["received_at", "%{@timestamp}"]
			}
		}
	}
	if "system_log" in [tags] {
		grok {
			match => {
				"message" => "%{SYSLOGTIMESTAMP:log_timestamp} %{SYSLOGHOST:log_hostname} %{DATA:log_program}(?:\[%{POSINT:syslog_pid}\])?: %{GREEDYDATA:message}"
			}
			overwrite => ["message"]
		}
	}
	if [fields][log_type] == "process" {
		if ([message] =~ "(.*)Axis2Message summary trace(.*)") {
			if ([message] =~ "(.*)request_id(.*)") {
				grok {
					match => {
						"message" => "%{TIMESTAMP_ISO8601:log_timestamp} %{LOGLEVEL:log_level} --- \[%{DATA:log_thread}\] %{DATA:logger} \: Axis2Message\ summary\ trace\:\[source\:%{DATA:source},dest\:%{DATA:dest},endpoint\:%{DATA:endpoint},message_sha\:%{DATA:message_sha},repeat_time\:%{NUMBER:repeat},retry_time\:%{NUMBER:retry},total_duration\:%{NUMBER:total_duration},call_duration\:%{NUMBER:call_duration},generate_request_duration\:%{NUMBER:gen_request_duration},calculate_sha_duration\:%{NUMBER:cal_sha_duration},send_request_duration\:%{NUMBER:send_duration},unMarshalling_duration\:%{NUMBER:unmarshall_duration},init_to_call_duration\:%{NUMBER:init_to_call_duration},call_to_gen_req_duration\:%{NUMBER:call_to_gen_req_duration},gen_req_to_sha_duration\:%{NUMBER:gen_req_to_sha_duration},sha_to_send_duration\:%{NUMBER:sha_to_send_duration},send_to_unmarshall_duration\:%{NUMBER:send_to_unmarshall_duration},unmarshall_to_end_duration\:%{NUMBER:unmarshall_to_end_duration},dup_duration\:%{NUMBER:duplicated_wait_duration},requestOME_length\:%{NUMBER:request_length},responseOME_length\:%{NUMBER:response_length},request_id\:%{DATA:request_id}\]%{GREEDYDATA:message}"
					}
					add_tag => ["axis2_trace", "trigger_by_ro"]
					add_field => {
						"type" => "trace"
					}
					# overwrite => ["message"]
				}
			}
			else {
				grok {
					match => {
						"message" => "%{TIMESTAMP_ISO8601:log_timestamp} %{LOGLEVEL:log_level} --- \[%{DATA:log_thread}\] %{DATA:logger} \: Axis2Message\ summary\ trace\:\[source\:%{DATA:source},dest\:%{DATA:dest},endpoint\:%{DATA:endpoint},message_sha\:%{DATA:message_sha},repeat_time\:%{NUMBER:repeat},retry_time\:%{NUMBER:retry},total_duration\:%{NUMBER:total_duration},call_duration\:%{NUMBER:call_duration},generate_request_duration\:%{NUMBER:gen_request_duration},calculate_sha_duration\:%{NUMBER:cal_sha_duration},send_request_duration\:%{NUMBER:send_duration},unMarshalling_duration\:%{NUMBER:unmarshall_duration},init_to_call_duration\:%{NUMBER:init_to_call_duration},call_to_gen_req_duration\:%{NUMBER:call_to_gen_req_duration},gen_req_to_sha_duration\:%{NUMBER:gen_req_to_sha_duration},sha_to_send_duration\:%{NUMBER:sha_to_send_duration},send_to_unmarshall_duration\:%{NUMBER:send_to_unmarshall_duration},unmarshall_to_end_duration\:%{NUMBER:unmarshall_to_end_duration},dup_duration\:%{NUMBER:duplicated_wait_duration},requestOME_length\:%{NUMBER:request_length},responseOME_length\:%{NUMBER:response_length}\]%{GREEDYDATA:message}"
					}
					add_tag => ["axis2_trace"]
					add_field => {
						"type" => "trace"
					}
					# overwrite => ["message"]
				}
			}
		}
		if ([message] =~ "(.*)appstats:soap_collector@@@(.*)") {
			grok {
				match => {
					"message" => "%{TIMESTAMP_ISO8601:log_timestamp} %{LOGLEVEL:log_level} --- \[%{DATA:log_thread}\] %{DATA:logger}  \: appstats\:soap_collector@@@phase\:%{DATA:phase}@@@send_time\:%{TIMESTAMP_ISO8601:send_time}@@@elapsed_time\:%{NUMBER:elapsed_time}@@@from\:%{DATA:source_service}_%{DATA:source_node}@@@endpoint\:%{DATA:dest_service}@@@method\:%{DATA:dest_endpoint}@@@fail_redo\:%{DATA:redo_time:NUMBER}@@@message_repeat\:%{DATA:repeat_time:NUMBER}@@@message_sha\:%{GREEDYDATA:message_sha}"
				}
				add_tag => ["soap_trace","interceptor","local_lab"]
				add_field => {
					"type" => "trace"
				}
			}
		}
		if ([type]!="trace") {
			grok {
				match => {
					"message" => "%{TIMESTAMP_ISO8601:log_timestamp} %{LOGLEVEL:log_level} %{GREEDYDATA:message}"
				}
				overwrite => ["message"]
			}
			grok {
				match => {
					"message" => "%{DATA:log_host} \[%{DATA:log_thread}\] %{DATA:log_source} : %{GREEDYDATA:message}"
				}
				overwrite => ["message"]
			}
		}
	}
	if [fields][log_type] == "access" {
		grok {
			match => {
				"message" => '%{IPORHOST:client_ip} (?:%{DATA:remote_user}|-) (?:%{DATA:user_auth}|-) \[%{HTTPDATE:access_timestamp}\] "(?:%{WORD:http_verb} %{NOTSPACE:request_path}(?: HTTP/%{NUMBER:http_version})?|%{DATA:raw_request})" %{NUMBER:response_code} (?:%{NUMBER:response_bytes}|-) %{QS:http_referrer} %{QS:user_agend} %{IPORHOST:server_ip} %{NUMBER:server_port} %{NUMBER:elapsed_millis} (?:%{DATA:client_session}|-) %{QS:x_forwarded_for}%{GREEDYDATA:data}'
			}
			overwrite => ["message"]
			remove_field => ["remote_username","user_authenticated"]
		}
		mutate {
			gsub => [
			"request", "\?.+", "",
			"x_forwarded_for", "(^\"|\"$)", "",
			"login_name", "(^\"|\"$)" , "",
			"http_referrer",  "(^\"|\"$)" , "",
			"user_agent", "(^\"|\"$)" , ""
			]
		}
		if [x_forwarded_for] != "-" {
			mutate {
				add_field => {
					"proxy_server" => "%{client_ip}"
				}

			}
			mutate {
				replace => {
					"client_ip" => "%{x_forwarded_for}"
				}

			}
			mutate {
				remove_field => ["x_forwarded_for"]
			}
		}
		if ![response_bytes] {
			mutate {
				add_field => {
					"response_bytes" => "0"
				}

			}
		}
		mutate {
			convert => {
				"response_bytes" => "integer"
				"elapsed_millis" => "integer"
				"server_port" => "integer"
			}
		}
		date {
			match => [ "access_timestamp" , "dd/MMM/yyyy:HH:mm:ss Z" ]
		}
	}
}

output {
	stdout {
		codec => rubydebug
	}
	if ([type]=="trace") {
		elasticsearch {
			hosts => ["elasticsearch.mfsd.my:9200"]
			index => "my-index-trace-%{+YYYY.MM.dd}"
		}
	}
}
